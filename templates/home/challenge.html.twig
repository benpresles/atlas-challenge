{% extends 'base.html.twig' %}

{% block title %} {{ title }} {% endblock %}

{% block nav %}
    {{ include('partials/_nav.html.twig') }}
{% endblock %}

{% block body %}
    <main class="page-wrapper">
        <section id="header" class="bg-white border-bottom border-dark border-opacity-25">
            <img src="{{ asset('build/images/challenge.jpg') }}" class="img-fluid w-100" alt="">
        </section>
        <section id="participate" class="bg-body-tertiary pt-5 pb-5 border-bottom border-dark border-opacity-25">
            <div class="container">
                <div class="row ">
                    <div class="col-12">
                        <h2 class="display-3 underline mb-3">How to participate ?</h2>
                        <p class="mb-2">
                            <a href="{{ path('app_login') }}">Registered</a> participants must provide one of the two following documents:
                        </p>
                        <ul class="list-group list-group-numbered list-group-flush mt-2 mb-2">
                            <li class="list-group-item bg-body-tertiary"> A technical report detailing their method provided along with the docker container</li>
                            <li class="list-group-item bg-body-tertiary">A submission to the REMIA workshop of a paper detailing their report
                                <a href="https://miccai-remia.github.io/">REMIA</a>
                            </li>
                        </ul>
                        <p class="mb-3">
                            Participants with submitted articles to the REMIA workshop and technical
                            reports will be guaranteed to be cited in the future article summarizing the ATLAS challenge.
                        </p>
                        <a class="btn btn-outline-primary" href="{{ path('app_login') }}">Log in / Sign up</a>
                    </div>
                </div>
            </div>
        </section>
        <section id="docker" class="bg-white pt-5 pt-lg-0 pb-5 pb-lg-0 border-bottom border-dark border-opacity-25">
            <div class="container">
                <div class="row">
                    <div class="col-lg-8 order-lg-2 p-5">
                        <h2 class="underline mb-3">Using docker containers</h2>
                        <p class="mb-2">
                           To avoid driver incompatibilities and memory limitations, all submitted Dockers must be able to perform inference on the CPU
                           using a maximum memory of 32 GB. To prevent cheating, we will disable the Internet connection during inference on the test images. 
                           An example of a Dockerfile  that can be used to build images with Python  is available here (Dockerfile). In addition to installing
                           Python, it creates a Python virtual environment and installs some Python packages (requirements.txt). Then, it defines a working 
                           directory and copies some files (check_pytorch.py, my_network_infer.py, unet.py, my_network.pt) from the host (your machine) into
                           the image. When the image is executed a bash shell is run. The directory structure should look like the following: 
                        </p>
                        <ul class="list-group list-group-flush mt-2 mb-2">
                            <li class="list-group-item">atlas-docker</li>
                            <li class="list-group-item">|____Dockerfile </li>
                            <li class="list-group-item">|____requirements.txt </li>
                            <li class="list-group-item">|____check_pytorch.py  </li>
                            <li class="list-group-item">|____unet.py  </li>
                            <li class="list-group-item">|____my_network_infer.py </li>
                            <li class="list-group-item">|____my_network.pt</li>
                            <li class="list-group-item">|____my_network_train.py</li>
                            <li class="list-group-item">|____MRIImages</li>
                            <li class="list-group-item" style="margin-left: 40px;">|____ im0.nii.gz</li>
                        </ul>

                        <h3 class="mb-3">Check that everything goes well  </h3>
                        <p class="mb-2">
                            Using a terminal, go to the atlas-docker folder, then run the following command to build the image: docker build -t name_of_your_image . 
                        </p>
                        <p class="mb-2">
                            To see your newly built image, run: docker images. You should see an image named name_of_your_image  
                        </p>
                        <p class="mb-2">
                            To create and run a new container from the newly built image, use the following command: docker run -it name_of_your_image.
                            You should get inside the container in the /app folder. To check that Pytorch is installed correctly, you can run inside the container 
                            in the /app folder: python3 check_pytorch.py 
                        </p>
                        <h3 class="mb-3">Infer on the CPU using the previous Docker image   </h3>
                         <p class="mb-2">
                            After creating and training a network (my_network_train.py) on GPU/CPU/TPU etc., save your model to a file (my_network.pt). 
                            Then, create a CPU inference script such as my_network_infer.py. Note that the files my_network.pt and my_network_infer.py have already
                             been copied (see Dockerfile). 
                        </p>
                        <p class="mb-2">
                            To be able to execute the inference script on an MRI image hosted on the local machine (your computer), you need to mount the folder containing 
                            the MRI images into the container. To do this, use the -v option when using docker run: 
                            docker run -v absolute_host_machine_path_where_are_the_MRI_images:absolute_path_inside_the_container -it name_of_your_image.
                        </p>
                        <p class="mb-2">
                            For example: docker run: docker run -v absolute_host_machine_path_where_are_the_MRI_images:/app/MRIImages -it name_of_your_image. 
                            As before, you should get inside the container in the /app folder.
                        </p>
                        <p class="mb-2">
                            To run your inference script on an image, you can do: python3 my_network_infer.py -i MRIImages/name_of_the_MRI_image.nii.gz 
                            -o MRIImages/output_network_image.nii.gz -s my_network.pt 
                        </p>

                        <p class="mb-2">
                            It is the participantâ€™s responsibility to create a development environment
                            and other prerequisites besides GPU drivers, such as Conda, PyTorch, CUDA,
                            CUDNN, and other tools.
                        </p>
                    </div>
                    <div class="col-lg-4 order-lg-1 img-bg img-h-20" style="background-image: url('{{ asset('build/images/container.jpg') }}');">
                    </div>

                </div>
            </div>
        </section>
        <section id="metrics" class="bg-body-secondary pt-5 pt-lg-0 pb-5 pb-lg-0 border-bottom border-dark border-opacity-25">
            <div class="container">
                <div class="row">
                    <div class="col-lg-8  p-5">
                        <h2 class="underline mb-3">Metrics</h2>
                        <p class="mb-2">
                            Evaluation of the algorithms will be done on the test set using the provided docker
                            container by the participants. Five different metrics will be used:
                        </p>
                        <ul class="list-group list-group-numbered list-group-flush mt-2 mb-2">
                            <li class="list-group-item bg-body-secondary">The average dice per structure</li>
                            <li class="list-group-item bg-body-secondary">The 3mm surface Dice</li>
                            <li class="list-group-item bg-body-secondary">The Average symmetric surface distance</li>
                            <li class="list-group-item bg-body-secondary">The Hausdorff distance</li>
                            <li class="list-group-item bg-body-secondary">The Root Mean Square Error on tumor burden calculation </li>
                        </ul>
                        <p class="mb-2">
                            Every metric except for the tumor burden will be calculated twice, once for the liver
                            and once for the tumor. The code that allows metric calculations is provided with
                            the dataset.
                        <p>
                        <p class="mb-2">
                            Rank-then-aggregate voting system over the nine scores obtained by the
                            participants will be used to compute the ranking.
                        </p>
                    </div>
                    <div class="col-lg-4  img-bg img-h-20" style="background-image: url('{{ asset('build/images/metrics.jpg') }}');">
                    </div>
                </div>
            </div>
        </section>
    </main>
{% endblock %}